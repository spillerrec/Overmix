#version 450

layout (local_size_x = 16, local_size_y = 16) in;

// The input tensors bind index is relative to index in parameter passed
layout(set = 0, binding = 0) buffer buf_in_a { float in_a[]; };
layout(set = 0, binding = 1) buffer buf_in_b { float in_b[]; };
layout(set = 0, binding = 2) buffer buf_in_c { float in_c[]; };
layout(set = 0, binding = 3) buffer buf_out_a { float out_a[]; };
layout(set = 0, binding = 4) buffer buf_out_b { float out_b[]; };
layout(set = 0, binding = 5) buffer buf_out_c { float out_c[]; };

layout (push_constant, std430) uniform PushConstants{
	int width;
	int height;
	int stride;
	int offset_x;
	int offset_y;
	
	float m00, m10, m20;
	float m01, m11, m21;
	float m02, m12, m22;
};

vec3 pixel(){
	uint x = gl_GlobalInvocationID.x + int(offset_x);
	uint y = gl_GlobalInvocationID.y + int(offset_y);

	uint pos = x + y*uint(width);
	return vec3(in_a[pos], in_b[pos], in_c[pos]);
}
void write(vec3 val){
	uint x = gl_GlobalInvocationID.x + int(offset_x);
	uint y = gl_GlobalInvocationID.y + int(offset_y);

	uint pos = x + y*uint(width);
	out_a[pos] = val.x;
	out_b[pos] = val.y;
	out_c[pos] = val.z;
}

void main() {
	vec3 pix =  pixel();

	mat3 m;
	m[0] = vec3(m00, m10, m20);
	m[1] = vec3(m01, m11, m21);
	m[2] = vec3(m02, m12, m22);

	write(m*pix);
	//write(pix*m);
}