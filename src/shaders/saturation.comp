#version 450

layout (local_size_x = 16, local_size_y = 16) in;

// The input tensors bind index is relative to index in parameter passed
layout(set = 0, binding = 0) buffer buf_in_a { float in_a[]; };
layout(set = 0, binding = 1) buffer buf_in_b { float in_b[]; };
layout(set = 0, binding = 2) buffer buf_in_c { float in_c[]; };
layout(set = 0, binding = 3) buffer buf_out_a { float out_a[]; };
layout(set = 0, binding = 4) buffer buf_out_b { float out_b[]; };
layout(set = 0, binding = 5) buffer buf_out_c { float out_c[]; };

layout (push_constant, std430) uniform PushConstants{
	int width;
	int height;
	int stride;
	int offset_x;
	int offset_y;
	
	float amount;
};

vec3 pixel(){
	uint x = gl_GlobalInvocationID.x + int(offset_x);
	uint y = gl_GlobalInvocationID.y + int(offset_y);

	uint pos = x + y*uint(width);
	return vec3(in_a[pos], in_b[pos], in_c[pos]);
}
void write(vec3 val){
	uint x = gl_GlobalInvocationID.x + int(offset_x);
	uint y = gl_GlobalInvocationID.y + int(offset_y);

	uint pos = x + y*uint(width);
	out_a[pos] = val.x;
	out_b[pos] = val.y;
	out_c[pos] = val.z;
}

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main() {
	vec3 pix =  rgb2hsv(pixel());

	pix.y *= amount;

	write(hsv2rgb(pix));
	//write(pix*m);
}